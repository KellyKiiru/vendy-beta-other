datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Model: Admin
model Admin {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  role     String @default("OVERALL_ADMIN")
}

// Model: Customer
model Customer {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String
  email     String     @unique
  password  String
  address   String?
  phone     String?
  role      String     @default("CUSTOMER")
  orders    Order[]
  business  Business[]
}

// Model: BusinessAdmin
model BusinessAdmin {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  phone    String
  password String
  role     String @default("BUSINESS_ADMIN")

  // relations
  businesses Business[] @relation("BusinessToAdmin")
  stores     Store[]    @relation("StoreToAdmin")
  Image      Image[]
}

// Model: Business
model Business {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  phoneNumber String? @default("")
  email       String?
  address     String
  city        String
  country     String

  productId String?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  confirmed  Boolean  @default(false)
  registered Boolean  @default(false)
  image      String?

  // relations
  admins    BusinessAdmin[] @relation("BusinessToAdmin")
  stores    Store[]         @relation("BusinessToStore")
  customers Customer[]
  Image     Image[]
}

// Model: Store
model Store {
  id          Int      @id @default(autoincrement())
  name        String
  phoneNumber String?
  address     String?
  location    String?
  country     String?
  slug        String?  @unique
  customerId  Int?
  businessId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  // business Business @relation("BusinessToStore", fields: [businessId], references: [id])

  products   Product[]       @relation("StoreToProduct")
  orders     Order[]         @relation("StoreToOrder")
  businesses Business[]      @relation("BusinessToStore")
  admins     BusinessAdmin[] @relation("StoreToAdmin")
  Image      Image[]

  @@index([businessId])
}

// Model: Product
model Product {
  id              Int      @id @default(autoincrement())
  name            String
  slug            String?  @unique
  description     String?  @db.VarChar(500)
  price           Decimal
  discountedPrice Decimal?
  quantity        Decimal?
  isFeatured      Boolean  @default(false)
  isArchived      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // relations
  storeId Int // Foreign Key to Store
  store   Store   @relation("StoreToProduct", fields: [storeId], references: [id])
  colorId String // Foreign Key to Color
  images  Image[]

  orderItems OrderItem[]

  @@unique([slug, storeId])
}

// Model: Order
model Order {
  id String @id @default(cuid())

  isPaid    Boolean  @default(false)
  phone     String   @default("")
  address   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   Int

  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  customer   Customer?   @relation(fields: [customerId], references: [id])
  customerId Int?

  @@index([storeId])
}

// Model: OrderItem
model OrderItem {
  id String @id @default(cuid())

  // relations
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

// Model: Image
model Image {
  id        String   @id @default(cuid())
  fileName  String
  imageUrl  String
  createdAt DateTime @default(now())

  // relations
  productId       Int
  businessAdminId Int
  businessId      Int
  storeId         Int

  // Foreign Keys
  product       Product?       @relation(fields: [productId], references: [id])
  businessAdmin BusinessAdmin? @relation(fields: [businessAdminId], references: [id])
  business      Business?      @relation(fields: [businessId], references: [id])
  store         Store?         @relation(fields: [storeId], references: [id])
}
